
var arr=[1,2,3,4]

1、 .push(元素)   // 往数组的最后面添加一个元素

     eg: arr.push(5)    // 表示往arr 的最后面添加元素 5 

2、 .unshift(元素)  //在数组的最前面添加一个元素

     eg: arr.unshift(5)  // 表示在 arr 的最前面添加元素 5 

3、 .pop()     //删除数组中最末尾的元素
     

4、 .shift()  //删除数组中的第一项

5、 .splice(index,number,替换的元素)

   index 表示索引号，从索引号为几的元素开始删除，

   number 表示删除元素的个数，如果不填，则表示删除该索引号元素后面的所有元素

   替换的元素 ：一般要对应，删除几个就替换几个，如果替换的元素不足，则会留下 “洞”，洞里面没有元素，但是要占位置

6、.reverse()  反转数组   

7、.sort()   排序，默认从小到大排序

   注：此排序是根据字典顺序排的
     
     eg:   var arr= [2,11,23,101]
           
           arr.sort();  // 排序后的数组是 ：  [101,11,2,23]

 若想要正常的从小到大排序 则需要                              从大到小
     
        arr.sort(function(a,b){                         arr.sort(function(){
  
                return a-b                               return  b-a

           })                                                     })         

       
8、 .concat(数组名，数组名)     将多个数组进行拼接

9、 .join(拼接的东西)       把数组转为字符串，并将数组中的元素拼接起来，
           eg :  var arr=[1,2,3]
                 
                 arr.join('-')   //就会输出 1-2-3   此时输出的是一串字符串，而非数组中的元素

10、.indexOf(元素)   //用于查找数组中元素的索引号，若该元素不在数组中，则返回 -1  

11、.includes(元素)   // 用于判断元素是否在数组中，若存在，则返回true,否则false


二、  数组去重
  
  思路：第一步： 创建一个新数组，用于保存不重复的元素
        第二步： 遍历原数组，判断原数组原数组是否在新数组里，如果不存在，就存入新数组中，如果存在，就不存

  代码实现：      var arr=[1,2,3,4,5,4,3,2,1]
                 
                 var newArr=[]

                 for(var i=0; i<arr.length;i++){

                    if( newArr.includes(arr[i])==false){

                        newArr.push(arr[i])
                    }
                 }
    
  第二中解决方案  
   
     思路： 利用双重循环，splice(index,1)

           第一步：外层循环遍历所有元素
           第二步：内层循环，遍历所有元素，判断该元素是否与外层元素相同，如果相同则删除即可

    代码实现：
               var arr=[1,2,3,4,5,4,3,2,1]
            
              for(var i=0; i<arr.length;i++){

                for (var j=i+1;j<arr.length;j++){

                    if(arr[j]==arr[i]){
                        arr.splice(j,1)
                        j--
                    }
                }

              }
             

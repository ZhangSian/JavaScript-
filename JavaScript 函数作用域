一、函数作用域 
  1、函数体中可以访问到函数外面的变量
  2、函数体外的函数不能直接访问函数体内的变量。除非调用该函数

  eg  var num=100;
      function fn(){
          var a=10;
          console.log(num);  // 此时可以打印出num 的值为100
      }

      console.log(a);      // 此时不能打印出a 的值，会报错。因为在函数体外无法直接访问函数体内的函数



二、变量作用域   ------> 变量起作用的范围

   1、局部作用域，局部作用域中的变量称之为局部变量
        
        函数体中定义的变量作用域，只能是函数体中起作用

   2、全局作用域，全局作用域中的变量称之为全局变量
        
        函数体外定义的变量作用域，所有的都能访问
    
    eg:            var num = 100;

                   var num1 = 1000;

                   function fn(){

                       var num3 = 10;       

                       console.log(num)        // 此时可以在控制台打印出100，因为num 是全局变量。在该代码的全局都可以访问到num的值

                       console.log(num4)       // 此时不能在控制台打印出 10000 ； 因为对于此处的函数fn来说，fn1 是fn 的子函数。fn 不能直接访问到 fn1中的值。除非调用函数fn1
                    
                       function fn1(){

                           var num4 = 10000;

                           console.log(num1)   // 同理，此处也可以打印出 1000 ； 因为 num1 也是全局变量 

                           console.log(num3)   // 此处可以打印出 10 ； 因为对于函数fn1 来说，函数 fn 是它的父函数，也就是它外面的函数，它可以直接访问他的父级元素，以及他父级元素能访问到的所有元素
                       }
                   }

                   console.log(num)            // 此时可以在控制台打印出100，因为num 是全局变量。在该代码的全局都可以访问到num的值

                   console.log(num3)          // 此处无法直接访问到num3的值

                   console.log(num4)          //  同理，此处也无法直接访问到num4的值

三、变量访问规则
   1、首先在自己的作用域找
   2、如果没有，就去上级作用域找
   3、如果还没有，就继续往上级找，直到找到全局作用域
   4、如果全局作用域也没有，就会报错（未定义  e is not undefined）

四、变量的赋值规则
    1、在自己的作用域找到对应变量，找到后直接赋值
    2、如果没找到，就去上级作用域找，直至找到全局作用域
    3、如果全局作用域也没有，则自动创建一个变量，给他赋值。

